{"version":3,"sources":["../../src/common/Game.js"],"names":["WIDTH","HEIGHT","Unit","gameEngine","options","props","other","health","Object","assign","type","BaseTypes","TYPES","INT16","DynamicObject","Ping","Game","physicsEngine","SimplePhysicsEngine","on","gameLogic","bind","serverSideInit","serverSidePlayerJoined","serverSidePlayerDisconnected","clientSideInit","clientSideDraw","serializer","registerClass","units","world","queryObjects","instanceType","pings","inputData","playerId","console","log","x","y","addObjectToWorld","position","TwoVector","ev","controls","KeyboardControls","renderer","clientEngine","document","addEventListener","e","sendInput","clientX","clientY","updateEl","querySelector","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, BaseTypes, TwoVector, DynamicObject, KeyboardControls, SimplePhysicsEngine } from 'lance-gg';\n\n// /////////////////////////////////////////////////////////\n//\n// GAME OBJECTS\n//\n// /////////////////////////////////////////////////////////\n\nconst WIDTH = 700;\nconst HEIGHT = 500;\nclass Unit extends DynamicObject {\n\n    constructor(gameEngine, options, props) {\n        super(gameEngine, options, props);\n    }\n\n    static get netScheme() {\n        return Object.assign({\n            health: { type: BaseTypes.TYPES.INT16 }\n        }, super.netScheme);\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n        this.health = other.health;\n    }\n}\n\nclass Ping extends DynamicObject {\n    constructor(gameEngine, options, props) {\n        super(gameEngine, options, props);\n    }\n\n    static get netScheme() {\n        return super.netScheme;\n    }\n\n    syncTo(other) {\n        super.syncTo(other);\n    }\n}\n\n\n// /////////////////////////////////////////////////////////\n//\n// GAME ENGINE\n//\n// /////////////////////////////////////////////////////////\nexport default class Game extends GameEngine {\n\n    constructor(options) {\n        super(options);\n        this.physicsEngine = new SimplePhysicsEngine({ gameEngine: this });\n\n        // common code\n        this.on('postStep', this.gameLogic.bind(this));\n\n        // server-only code\n        this.on('server__init', this.serverSideInit.bind(this));\n        this.on('server__playerJoined', this.serverSidePlayerJoined.bind(this));\n        this.on('server__playerDisconnected', this.serverSidePlayerDisconnected.bind(this));\n\n        // client-only code\n        this.on('client__rendererReady', this.clientSideInit.bind(this));\n        this.on('client__draw', this.clientSideDraw.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Unit);\n        serializer.registerClass(Ping);\n    }\n\n    gameLogic() {\n        let units = this.world.queryObjects({instanceType: Unit});\n        let pings = this.world.queryObjects({instanceType: Ping})\n\n    }\n\n    processInput(inputData, playerId) {\n        if(inputData===\"mousemove\"){\n            console.log(\"click at \" + inputData.options.x + \" \" + inputData.options.y);\n        }\n        super.processInput(inputData, playerId);\n    }\n\n\n    // /////////////////////////////////////////////////////////\n    //\n    // SERVER ONLY CODE\n    //\n    // /////////////////////////////////////////////////////////\n    serverSideInit() {\n        this.addObjectToWorld(new Unit(this, null, { position: new TwoVector(100, 100) }));\n    }\n\n    serverSidePlayerJoined(ev) {\n        let units = this.world.queryObjects({ instanceType: Unit });\n        units[0].playerId = ev.playerId;\n    }\n\n    serverSidePlayerDisconnected(ev) {\n        units[0].playerId = 0;\n    }\n\n\n    // /////////////////////////////////////////////////////////\n    //\n    // CLIENT ONLY CODE\n    //\n    // /////////////////////////////////////////////////////////\n    clientSideInit() {\n        this.controls = new KeyboardControls(this.renderer.clientEngine);\n        document.addEventListener('mousemove', (e)=>{\n            this.sendInput('mousePos', { x: e.clientX, y: e.clientY });\n        });\n\n    }\n\n    clientSideDraw() {\n        let units = this.world.queryObjects({ instanceType: Unit });\n        updateEl(document.querySelector('.unit1'), units[0]);\n    }\n}\n"],"file":"Game.js"}